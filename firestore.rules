
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to get user data
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    // Helper function to check user role
    function isUserRole(role) {
      return isAuthenticated() && getUserData(request.auth.uid).role == role;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Allow users to read their own data
      allow read: if isAuthenticated() && request.auth.uid == userId;
      // Allow users to create their own user document upon signup
      allow create: if isAuthenticated();
      // Allow users to update their own data
      allow update: if isAuthenticated() && request.auth.uid == userId;
    }

    // Rules for 'stockItems' collection
    match /stockItems/{itemId} {
      allow read, write: if isAuthenticated(); // More specific rules can be added later
    }

    // Rules for 'reviews' collection
    match /reviews/{reviewId} {
        allow read: if true; // Publicly readable
        allow create: if isAuthenticated(); // Any authenticated user can create a review
        // Only the author can update/delete their review
        allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.vendorId;
    }
    
    // Rules for 'orders' collection
    match /orders/{orderId} {
        // Allow vendor or supplier to read
        allow read: if isAuthenticated() && (request.auth.uid == resource.data.vendorId || request.auth.uid == resource.data.supplierId);
        // Allow vendor or supplier to update (for status changes)
        allow update: if isAuthenticated() && (request.auth.uid == resource.data.vendorId || request.auth.uid == resource.data.supplierId);
        // Only vendor can create
        allow create: if isAuthenticated() && isUserRole('vendor');
    }

    // Rules for 'diaryEntries' collection
    match /diaryEntries/{entryId} {
        // Only the owner can read/write their entries
        allow read, write: if isAuthenticated() && request.auth.uid == resource.data.ownerId;
    }

    // Rules for the 'bids' collection and 'proposals' subcollection
    match /bids/{bidId} {
      // Any authenticated user can see the list of requirements
      allow list, read: if isAuthenticated();
      
      // Only a 'vendor' can create a bid requirement.
      // The vendorId in the document must match their own UID.
      allow create: if isAuthenticated() 
                    && isUserRole('vendor')
                    && request.resource.data.vendorId == request.auth.uid;
                    
      // Only the vendor who created the bid can update it (e.g., to close it).
      allow update: if isAuthenticated() 
                    && resource.data.vendorId == request.auth.uid;

      // Only the vendor who created the bid can delete it.
      allow delete: if isAuthenticated() 
                    && resource.data.vendorId == request.auth.uid;

      // Rules for the 'proposals' subcollection within each bid
      match /proposals/{proposalId} {
        // The vendor who owns the bid can read all proposals for it.
        // A supplier can read their own proposal.
        allow read: if isAuthenticated() && 
                    (get(/databases/$(database)/documents/bids/$(bidId)).data.vendorId == request.auth.uid ||
                     resource.data.supplierId == request.auth.uid);

        // A supplier can list their own proposals.
        allow list: if isAuthenticated() && isUserRole('supplier');

        // Only a 'supplier' can create a proposal.
        // The supplierId must match their own UID.
        allow create: if isAuthenticated() 
                      && isUserRole('supplier')
                      && request.resource.data.supplierId == request.auth.uid;
                      
        // Only the creating supplier can update their proposal (e.g., withdraw - not implemented yet)
        // Or the vendor can update it to set the 'accepted' status.
        allow update: if isAuthenticated() && 
                      (request.resource.data.supplierId == request.auth.uid ||
                       get(/databases/$(database)/documents/bids/$(bidId)).data.vendorId == request.auth.uid);
      }
    }
  }
}
