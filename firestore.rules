
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to get user data from the 'users' collection
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // Helper function to check if the current user has a specific role
    function hasRole(role) {
      return isAuthenticated() && getUserData(request.auth.uid).role == role;
    }
    
    // User profiles can be read by any authenticated user.
    // A user can only write to their own document.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Bids (Requirements posted by vendors)
    match /bids/{bidId} {
      // Any authenticated user can view the list of bids in the marketplace.
      allow list: if isAuthenticated();
      
      // The vendor who created the bid can read its full details.
      // A supplier can read the details of a bid to decide if they want to propose an offer.
      allow read: if isAuthenticated();
      
      // Only authenticated vendors can create new bids.
      allow create: if hasRole('vendor');

      // Only the vendor who owns the bid can update it (e.g., to close it).
      allow update: if isAuthenticated() && resource.data.vendorId == request.auth.uid;
      
      // Only the vendor who owns the bid can delete it.
      allow delete: if isAuthenticated() && resource.data.vendorId == request.auth.uid;

      // --- Nested Proposals Rule ---
      // This rule applies to the 'proposals' sub-collection within a specific bid.
      match /proposals/{proposalId} {
        // A supplier can see their own proposal.
        // A vendor can see all proposals on their own bid.
        allow read: if (hasRole('supplier') && resource.data.supplierId == request.auth.uid) ||
                     (hasRole('vendor') && get(/databases/$(database)/documents/bids/$(bidId)).data.vendorId == request.auth.uid);
                     
        // Only suppliers can create proposals on a bid.
        allow create: if hasRole('supplier');

        // Only the supplier who created the proposal can update it.
        allow update: if hasRole('supplier') && resource.data.supplierId == request.auth.uid;
        
        // A vendor can see all proposals on their specific bid.
        allow list: if hasRole('vendor') && get(/databases/$(database)/documents/bids/$(bidId)).data.vendorId == request.auth.uid;
        
        // Deleting proposals is disallowed to maintain a record.
        allow delete: if false;
      }
    }
    
    // This is the collection group query rule for the "My Submitted Bids" list for suppliers.
    // It allows a supplier to query across all 'proposals' collections, but only retrieves documents where they are the owner.
    match /{path=**}/proposals/{proposalId} {
        allow list: if hasRole('supplier') && request.query.where.supplierId == request.auth.uid;
    }

    // Orders can be read or written only by the vendor or the supplier involved in that order.
    match /orders/{orderId} {
      allow read, write: if isAuthenticated() && (request.auth.uid == resource.data.vendorId || request.auth.uid == resource.data.supplierId);
    }

    // Reviews can be read by any authenticated user.
    // To preserve integrity, reviews can only be created, not updated or deleted.
    match /reviews/{reviewId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow update, delete: if false;
    }
    
    // Stock Items can only be managed (read, write, delete) by their owner.
    match /stockItems/{itemId} {
        allow read, write, delete: if isAuthenticated() && request.auth.uid == resource.data.ownerId;
        allow list: if isAuthenticated();
    }
    
    // Diary Entries can only be managed by their owner.
    match /diaryEntries/{entryId} {
        allow read, write, delete: if isAuthenticated() && request.auth.uid == resource.data.ownerId;
    }
  }
}
