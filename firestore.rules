
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAuthenticated() {
      return request.auth != null;
    }

    function isRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isOwner(userId) {
        return request.auth.uid == userId;
    }

    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
    }
    
    match /reviews/{reviewId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
    }
    
    match /orders/{orderId} {
        allow read, update: if isAuthenticated() && (
            isOwner(resource.data.vendorId) || isOwner(resource.data.supplierId)
        );
    }
    
    match /stockItems/{itemId} {
        allow read, create, delete: if isAuthenticated() && isOwner(request.resource.data.ownerId);
    }
    
    match /diaryEntries/{entryId} {
        allow read, create: if isAuthenticated() && isOwner(request.resource.data.ownerId);
    }

    // Bidding System Rules
    match /bids/{bidId} {
      // Anyone authenticated can see the list of requirements.
      allow read: if isAuthenticated();
      
      // Only vendors can create new requirements.
      allow create: if isAuthenticated() && isRole('vendor');
      
      // Only the vendor who created the bid can update or delete it.
      allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.vendorId;

      match /proposals/{proposalId} {
        // A vendor can see proposals on their own bid. A supplier can see their own proposal.
        allow read: if isAuthenticated() && 
                    (get(/databases/$(database)/documents/bids/$(bidId)).data.vendorId == request.auth.uid ||
                     isOwner(resource.data.supplierId));
        
        // Only suppliers can create proposals. They can't bid on their own reqs (if they were also a vendor)
        allow create: if isAuthenticated() && isRole('supplier') && get(/databases/$(database)/documents/bids/$(bidId)).data.vendorId != request.auth.uid;
        
        // Only the vendor can "update" a proposal (by accepting it).
        allow update: if isAuthenticated() && isRole('vendor') && get(/databases/$(database)/documents/bids/$(bidId)).data.vendorId == request.auth.uid;
        
        // Proposals cannot be deleted for record-keeping.
        allow delete: if false;
      }
    }
  }
}
