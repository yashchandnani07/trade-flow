
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(resource) {
      return request.auth.uid == resource.data.ownerId;
    }
    
    function isVendorOwner(resource) {
        return request.auth.uid == resource.data.vendorId;
    }

    // Users can only read/update their own user document
    match /users/{userId} {
      allow read, update: if isAuthenticated() && request.auth.uid == userId;
    }

    // Allow logged-in users to read from suppliers and reviews
    match /suppliers/{supplierId} {
        allow read: if isAuthenticated();
    }
    
    match /reviews/{reviewId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && request.auth.uid == request.resource.data.vendorId;
    }

    // Rules for bids and proposals
    match /bids/{bidId} {
      allow read: if isAuthenticated();
      allow create: if isVendorOwner(request.resource);

      // Proposals sub-collection
      match /proposals/{proposalId} {
        allow read: if isAuthenticated();
        // Allow suppliers to create proposals on bids
        allow create: if isAuthenticated() && request.auth.uid == request.resource.data.supplierId;
        // Allow proposal owners or bid owners to update proposals (for negotiation)
        allow update: if isAuthenticated();
      }
    }
    
    // Rules for orders
    match /orders/{orderId} {
        allow read, update: if isAuthenticated() && (request.auth.uid == resource.data.vendorId || request.auth.uid == resource.data.supplierId);
    }
    
    // Rules for stockItems
    match /stockItems/{itemId} {
      allow read, create, delete: if isAuthenticated() && isOwner(request.resource);
    }

  }
}
