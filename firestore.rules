
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Allow users to read their own data, and other users' public supplier profiles.
    match /users/{userId} {
      allow read: if request.auth.uid == userId || resource.data.role == 'supplier';
      allow write: if request.auth.uid == userId;
    }

    // This rule allows the list query for suppliers on the supplier page.
    match /users/{userId} {
       allow list: if request.auth != null;
    }

    // Users can manage their own stock items
    match /stockItems/{stockItemId} {
      allow create: if request.auth.uid == request.resource.data.ownerId;
      allow read, update, delete: if request.auth.uid == resource.data.ownerId;
    }
    
    // Diary entries can only be accessed by their owner.
    match /diaryEntries/{entryId} {
      allow read, write, delete: if request.auth.uid == resource.data.ownerId;
    }
    
    // Orders can be managed by either the vendor or the supplier involved
    match /orders/{orderId} {
        allow read, write: if request.auth.uid == resource.data.vendorId || request.auth.uid == resource.data.supplierId;
    }

    // Reviews can be read by anyone, but only created by the authenticated vendor who has a verified order
    match /reviews/{reviewId} {
        allow read: if request.auth != null;
        allow create: if request.auth.uid == request.resource.data.vendorId && request.resource.data.verified == true;
    }

    // Bids can be read by any authenticated user.
    match /bids/{bidId} {
        allow read: if request.auth != null;
        
        // Bids can only be created by a user with a 'vendor' role.
        allow create: if request.auth.uid == request.resource.data.vendorId &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'vendor';

        // Only the vendor who created the bid can update or delete it.
        allow update, delete: if request.auth.uid == resource.data.vendorId;
    }
    
    // Rules for proposals on a specific bid.
    match /bids/{bidId}/proposals/{proposalId} {
        
        // A user can read a proposal if they are the vendor of the bid OR the supplier who made the proposal.
        allow read: if request.auth != null && 
                    (get(/databases/$(database)/documents/bids/$(bidId)).data.vendorId == request.auth.uid ||
                     resource.data.supplierId == request.auth.uid);

        // A user can create a proposal if they are authenticated, have the 'supplier' role,
        // and are not the vendor who created the bid.
        allow create: if request.auth != null &&
            request.auth.uid == request.resource.data.supplierId &&
            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'supplier' &&
            request.auth.uid != get(/databases/$(database)/documents/bids/$(bidId)).data.vendorId;
            
        // The vendor of the bid can update any proposal (to accept/reject).
        // A supplier can update their own proposal (to change price, etc., if status is pending).
        allow update: if request.auth != null &&
            (get(/databases/$(database)/documents/bids/$(bidId)).data.vendorId == request.auth.uid ||
             (request.auth.uid == resource.data.supplierId && resource.data.status == 'pending'));
    }
  }
}
